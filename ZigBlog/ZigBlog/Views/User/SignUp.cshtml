@model UserSignUpViewModel

@{
    ViewBag.Title = Translation.UserSignUp;
}

<h2>@Translation.UserSignUp <small>@Translation.SignUpDescription</small></h2>

@using (Html.BeginForm("SignUp", "User", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true);
    
    @Html.AntiForgeryToken()

    @Html.HiddenFor(x => x.ReturnUrl)

    <div class="form-group">
        @Html.LabelFor(x => x.Avatar)
        <input accept="image/jpeg,image/png,image/gif" name="Avatar" type="file"/>
        <p class="help-block">@Translation.AvatarImageUploadHelp</p>
        @Html.ValidationMessageFor(x => x.Avatar)
    </div>

    <div class="form-group">
        @Html.LabelFor(x => x.Username)
        @Html.TextBoxFor(x => x.Username, new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.Username)
    </div>
    
    <div class="form-group">
        @Html.LabelFor(x => x.Password)
        @Html.PasswordFor(x => x.Password, new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.Password)
    </div>
    
    <div class="form-group">
        @Html.LabelFor(x => x.PasswordConfirmation)
        @Html.PasswordFor(x => x.PasswordConfirmation, new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.PasswordConfirmation)
    </div>
    
    <div class="form-group">
        @Html.LabelFor(x => x.EmailAddress)
        @Html.TextBoxFor(x => x.EmailAddress, new { @class = "form-control", type = "email" })
        @Html.ValidationMessageFor(x => x.EmailAddress)
    </div>

    <div class="form-group">
        @Html.CheckBoxFor(x => x.AcceptTerms)
        @Html.LabelFor(x => x.AcceptTerms)
        @Html.ValidationMessageFor(x => x.AcceptTerms)
    </div>
    
    <button type="submit" class="btn btn-primary">@Translation.UserSignUp</button>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    
    <script type="text/javascript">
        /// <reference path="~/Scripts/jquery-2.1.4.js"/>
        /// <reference path="~/Scripts/jquery.validate.js"/>
        /// <reference path="~/Scripts/jquery.validate.unobtrusive.js"/>

        'use strict';

        if ($.validator && $.validator.unobtrusive) {
            $.validator.unobtrusive.adapters.add('password', ['requiredigit', 'requiredlength', 'requirelowercase', 'requirenonletterordigit', 'requireuppercase'], function (options) {
                options.rules['password'] = options.params;
                options.messages['password'] = options.message;
            });

            $.validator.addMethod('password', function (value, element, params) {
                if (params.requiredigit === 'True' && /\d+/.exec(value.toString()) === null)
                    return false;

                if (params.requiredlength !== 0 && value.toString().length < params.requiredlength)
                    return false;

                if (params.requirelowercase === 'True' && /[a-z]/.exec(value.toString()) === null)
                    return false;

                if (params.requireuppercase === 'True' && /[A-Z]/.exec(value.toString()) === null)
                    return false;

                return true;
            });
        }
    </script>
}

